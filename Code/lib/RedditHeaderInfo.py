#!/usr/bin/env python3
"""Run with --help for info."""
from general.procs import ProcInfo

class RedditHeaderInfo(ProcInfo):
    _mappers = {
        'call_to_action': {
            "Apply Now": 1, "Contact Us": 2, "Download": 3, "Get Showtimes": 4,
            "Get a Quote": 5, "Install": 6, "Learn More": 7, "Play Now": 8,
            "See Menu": 9, "Shop Now": 10, "Sign Up": 11, "View More": 12,
            "Watch Now": 13,
        },
        'category': {
            "animals": 1, "art": 2, "diy": 3, "diy_and_crafts": 4,
            "drawing_and_painting": 5, "entertainment": 6, "food": 7,
            "funny": 8, "gaming": 9, "memes": 10, "music": 11,
            "photography": 12, "pics_and_gifs": 13, "video_games": 14,
            "videos": 15, "writing": 16,
        },
        'distinguished': {
            "admin": 1,
            "moderator": 2,
            "special": 3,
        },
        'embed_type': {
            "iframe": 1,
            "scrape": 2
        },
        'post_hint': {
            "hosted:video": 1,
            "image": 2,
            "link": 3,
            "rich:video": 4,
            "self": 5,
            "video": 6,
        },
        'subreddit_type': {
            "archived": 1,
            "gold_restricted": 2,
            "private": 3,
            "public": 4,
            "restricted": 5,
            "user": 6,
        },
        'suggested_sort': {
            "confidence": 1,
            "controversial": 2,
            "live": 3,
            "new": 4,
            "old": 5,
            "qa": 6,
            "random": 7,
            "top": 8,
        },
        'whitelist_status': {
            "all_ads": 1,
            "house_only": 2,
            "no_ads": 3,
            "promo_adult": 4,
            "promo_adult_nsfw": 5,
            "promo_all": 6,
            "promo_specified": 7,
        },
    }
    _output_headers = {
        'post_id': "The Reddit post id of the post prefaced with 'a' or 'b'  replaced for 't3_' (submissions) and 't1_' (comments) respectively. This makes thems shorter (saving gigabytes), easier to sort (work almost regardless of your locale/language settings), and provide the correct order for building thread trees easily. You can replace each leading 'a' with 't3_' and 'b' with 't1_' to recreate the original id.",
        'created': "The time at which the post was created in UNIX seconds.",
        'parent_id': "The parent id of the post to which this post is replying, if any.",
        'comment_id': "The post_id of the topmost comment (the comment at depth = 1) of the thread to which this post belongs, if any. See post_id for more information.",
        'subreddit': "The subreddit to which this poinst was posted.",
        'author': "The username of the author of this post, if not deleted at the time of download, otherwise '[deleted]'.",
        'author_deleted': "1 = True, 0 = False.",
        'year': "The four-digit year this post was posted.",
        'month': "The numeric month this post was posted.",
        'day': "The day of (UTC) the month this post was posted.",
        'hour': "The hour (UTC) at which this post was posted.",
        'minute': "The minute (UTC) at which this post was posted",
        'second': "The second (UTC) at which this post was posted",
        'day_of_week': "The day of the week (UTC) at which this post was posted. 0=Sunday, 6=Saturday",
        'deleted_or_removed': "Was the post or body of the post deleted or removed? 1 if yes, 0 if no.",
        'submission_id': "For submissions, this is the same as its post_id. For comments, this is the post_id of the submission to which it belongs. If unknown, this is blank.",
        'top_comment_id': "The post_id of the 'top most' comment in thread. For submissions, this will be blank. For comments, all comments with depth=1 will have themselves, those with depth=2 will have their direct parent comment post_id, with each child having that same id. This enables researchers to pull out entire conversatio threads.",
        'depth': "The depth of this post. 0=Submission, 1=Response to submission, 2=Response to post at depth 1, etc. Note that for approximately 1 in every 10,000 posts it was not possible to determine their depth because its parent or an upstream parent is missing from the dataset. The top-most post that could be identified will therefore have a -1 for depth whereas its direct children will have -2, their children -3 and so on. All negative depths therefore represent depth uncertanty; however, if relative depth is what is of interest, this allows a researcher to still determine relative depth for many of the posts with unknown depth, at least with respect to each other.",
        'secs_since_parent': "The number of seconds between this post's and it's parent post's created_utc.",
        'num_children': "The number of direct children the post has.",
        'num_progeny': "The total number of progeny (chidlren, the chidlren's children, and so forth.",
        'num_child_authors': "The total number of unique authors among the children, including this post's author, if they replied to themselves. Note that authors that have been deleted will count as one unique author even if there were different authors that were deleted, because it is not possible to distinguish them.",
        'num_progeny_authors': "The total number of unique authors among the progeny. This is counted similarly to num_child_authors.",
        'num_child_authors_del': "The total number of child posts whose author was '[deleted]' and therefore unknown.",
        'num_progeny_authors_del': "The total number of progeny whose author was '[deleted]'",
        'child_self_reply': "Did this author reply to their own post? 0 = No. 1 = Yes. NOTE: deteled authors always have this as 0.",
        'progeny_self_reply': "Did this author reply to either their own post or other posts below their own post.? 0 = No. 1 = Yes. NOTE: deteled authors always have this as 0.",
        'max_depth': "The maximum depth of the branch of the thread underneath this post. To find the relative maximum depth, subtract this from 'depth'.",
        'archived': "Was this post archived at the time of download? 1 if yes, 0 if no.",
        'cakeday': "Was this post posted on the author's 'cakeday'? 1 if yes, 0 if no.",
        'auth_created_utc': "When was the author's account created in UNIX seconds (UTC).",
        'auth_has_flair': "Did the author's post have an \"author's flair\" at the time of download. 1 if yes, 0 if no.",
        'auth_id': "The author's reddit id.",
        'banned': "1 if the author was banned from the subreddit at the time of download, 0 otheriwse. Note: This value does not appear to be reliable. Of the first 16.6 billion records processed, only 3 had '1', 797M had '0', the rest were empty.", # Useless since only 3 of the first 15 billion records had '1'.
        'had_html': "1 if the post had an HTML version (either title or text), 0 otherwise.",
        'brand_safe': "1 if the post was marked as 'brand_safe', 0 otherwise.",
        'call_to_action': 'mapper',
        'can_gild': "Could the post be guilded by someone at the time of download? 1 if yes, 0 if no.",
        'can_mod_post': "1 if yes, 0 if no.",
        'category': "mapper",
        'collapsed': "Was this post \"collapsed\" at the time of download? 1 if yes, 0 if no.",
        'contest_mode': "Was this post in contest mode at the time of download? 1 if yes, 0 if no.",
        'controversiality': "Was this post marked as controversial at the time of download? 1 if yes, 0 if no.",
        'crosspost_parent': "The post_id of the post from which this was crossposted.",
        'distinguished': "mapper",
        'downs': "The number of downvotes. This data is missing for the vast majority of posts.",
        'edited': "If the post was edited by the author after the initial post, this  is the time in UNIX seconds of the last edit of the post. Empty if it was never edited.",
        'embed_type': "mapper",
        'had_event': "Did this post have event information ('event_start', 'event_end', or 'event_is_live') at the time of download? 1 if yes, 0 if no.",
        'gild_count': "Number of gildings (the number in the 'gilded' JSON element if any).",
        'hide_score': "Was the score hidden from users at the time of download? 1 if yes, 0 if no.",
        'gild_1': "Number of gilds of type 1",
        'gild_2': "Number of gilds of type 2",
        'gild_3': "Number of gilds of type 3",
        'is_crosspostable': "Was this post one that could be cross-posted at the time of download? 1 if yes, 0 if no.",
        'is_meta': "Was this post flagged as 'meta'. 1 if yes, 0 if no.",
        'is_original_content': "1 if yes, 0 if no.",
        'is_reddit_media_domain': "1 if yes, 0 if no.",
        'is_robot_indexable': "1 if yes, 0 if no.",
        'is_self': "1 if yes, 0 if no.",
        'is_submitter': "1 if yes, 0 if no.",
        'is_video': "1 if yes, 0 if no.",
        'likes': "The number of likes",
        'locked': "1 if yes, 0 if no.",
        'media_length': "The length of the media.",
        'media_embed_length': "The length of the embedded medial.",
        'media_only': "1 if yes, 0 if no.",
        'mod_reports': "1 if it had mod reports, 0 if no. Note: 0 does not guarantee that the post was not reported.",
        'name': "The name.",
        'no_follow': "1 if yes, 0 if no.",
        'num_comments': "Number of comments as of the time of download.",
        'num_crossposts': "Number of crossposts as of the time of download.",
        'num_reports': "Number of reports as of the time of download.",
        'over_18': "Was the post flagged for mature audiences (e.g., NSFW)? 1 if yes, 0 if no.",
        'pinned': "Was the post pinned by a moderator? 1 if yes, 0 if no.",
        'post_hint': "mapper",
        'preview_length': "Length of the preview text",
        'promoted': "Was this post promoted? 1 if yes, 0 if no.",
        'pwls': "The contents of the pwls element in the Reddit JSON.",
        'quarantine': "Was this post quaranteined? 1 if yes, 0 if no.",
        'removal_reason': "The reason for the post being removed.",
        'retrieved_on': "Date retrieved on for this data set in UNIX seconds",
        'age_at_retrieval': "Number of seconds between post creation and post download",
        'rte_mode': "The rte_mode provided in the JSON",
        'saved': "Was this post saved? 1 if yes, 0 if no.",
        'score': "The score of this post at the time of download.",
        'score_hidden': "Was the score hidden at the time of download? 1 if yes, 0 if no.",
        'secure_media_length': "The length of the secure media text.",
        'secure_media_embed_length': "The length of the secure media embed text.",
        'send_replies': "1 if yes, 0 if no.",
        'show_media': "1 if yes, 0 if no.",
        'spoiler': "1 if yes, 0 if no.",
        'stickied': "1 if yes, 0 if no.",
        'subreddit_subscribers': "Number of subreddit subscribers at the time of download for this subreddit",
        'subreddit_type': "mapper",
        'suggested_sort': "mapper",
        'third_party_trackers': "Number of third party trackers",
        'third_party_tracking': "1 if yes, 0 if no.",
        'third_party_tracking_2': "1 if yes, 0 if no.",
        'thumbnail': "1 if yes, 0 if no.",
        'thumbnail_height': "Height of thumbnail in pixels",
        'thumbnail_width': "Width of thumbnail in pixels",
        'ups': "Number of upvotes. Not provided for the vast majority of downloaded posts.",
        'whitelist_status': "mapper",
        'title_status': "0 = Normal, 1 = removed (e.g., by moderator), 2 = deleted (by author).",
        'title_word_count': "Number of words in the title, counted using python's split() on whitespace after removing all punctuation marks.",
        'title_length': "Length of the title in number of characters, including whitespace but excluding null characters.",
        'title_checksum': "The checksum of the title (base64 encoded md5 hash for more compact storage).",
        'title_cleaned_word_count': "Number of words in the title it was cleaned as discribed in the paper , counted using python's split() on whitespace after removing all punctuation marks.",
        'title_cleaned_length': "Length of the title in number of characters it was cleaned as discribed in the paper , including whitespace but excluding null characters.",
        'title_cleaned_checksum': "The checksum of the title after it was cleaned as discribed in the paper (base64 encoded md5 hash for more compact storage).",
        'title_textblob_nbayes_classification': "The Python TextBlob NaiveBayesClassifier classification for the title. Note: This is preformed on the original text after 'cleaning' as described in the paper.",
        'title_textblob_nbayes_negative': "The Python TextBlob NaiveBayesClassifier negative score for the title. Note: This is preformed on the original text after 'cleaning' as described in the paper.",
        'title_textblob_nbayes_positive': "The Python TextBlob NaiveBayesClassifier positive score for the title. Note: This is preformed on the original text after 'cleaning' as described in the paper.",
        'title_textblob_polarity': "The Python TextBlob polarity score for the title which ranges from -1 (negative sentiment) to 1 (positive sentiment).",
        'title_textblob_subjectivity': "The Python TextBlob subjectivity score for the title which ranges from 0 (objective) to 1 (subjective).",
        'title_vader_negative_score': "The NLTK Vader SentimentIntensityAnalyzer Negative Score of the title as calculated for the English language. This will be invalid for non-English posts.",
        'title_vader_neutral_score': "The NLTK Vader SentimentIntensityAnalyzer Neutral Score of the title as calculated for the English language. This will be invalid for non-English posts.",
        'title_vader_positive_score': "The NLTK Vader SentimentIntensityAnalyzer Positive Score of the title as calculated for the English language. This will be invalid for non-English posts.",
        'title_vader_composite_score': "The NLTK Vader SentimentIntensityAnalyzer Composite Score of the title as calculated for the English language. This will be invalid for non-English posts.",
        'title_langdetect_lang1': "The first Python langdetect.detect_langs() language code for the post title.",
        'title_langdetect_prob1': "The first Python langdetect.detect_langs() language probability (confidence) for the post title.",
        'title_langdetect_lang2': "The second Python langdetect.detect_langs() language code for the post title.",
        'title_langdetect_prob2': "The second Python langdetect.detect_langs() language probability (confidence) for the post title.",
        'title_langdetect_lang3': "The third Python langdetect.detect_langs() language code for the post title.",
        'title_langdetect_prob3': "The third Python langdetect.detect_langs() language probability (confidence) for the post title.",
        'title_ftlangdetect_lang': "The Python ftlangdetect language code for the post title.",
        'title_ftlangdetect_score': "The Python ftlangdetect language score (confidence) for the post title.",
        'title_polyglot_lang1': "The first Python polyglot.detect.Detector language code for the post title.",
        'title_polyglot_conf1': "The first Python polyglot.detect.Detector language confidence for the post title.",
        'title_polyglot_lang2': "The second Python polyglot.detect.Detector language code for the post title.",
        'title_polyglot_conf2': "The second Python polyglot.detect.Detector language confidence for the post title.",
        'title_polyglot_lang3': "The third Python polyglot.detect.Detector language code for the post title.",
        'title_polyglot_conf3': "The third Python polyglot.detect.Detector language confidence for the post title.",
        'title_textstat_automated_readability_index': "TextStat Automated Readability Index as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_coleman_liau_index': "TextStat Coleman Liau Index as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_crawford': "TextStat Crawford Score as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_dale_chall_readability_score': "TextStat Dale Chall Readability Score as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_difficult_words': "TextStat Difficult Words as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_fernandez_huerta': "TextStat Fernandez Huerta Readability Score as calculated for the Spanish language. This will be invalid for non-Spanish posts.",
        'title_textstat_flesch_kincaid_grade': "TextStat Flesch Kincaid Readability Score as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_flesch_reading_ease': "TextStat Flesch Readability Score as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_gunning_fog': "TextStat Gunning Fog Index as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_gutierrez_polini': "TextStat Gutierrez Polini Score as calculated for the Spanish language. This will be invalid for non-Spanish posts.",
        'title_textstat_linsear_write_formula': "TextStat Linsear Write as calculated for the English language. This will be invalid for non-English posts.",
        'title_textstat_smog_index': "TextStat SMOG Readability Score",
        'title_textstat_szigriszt_pazos': "TextStat Szigriszt-Pazos Score as calculated for the Spanish language. This will be invalid for non-Spanish posts.",
        'title_textstat_text_standard_grade': "TextStat Standard Grade Estimate as calculated for the English language. This will be invalid for non-English posts.",
        'body_status': "0 = Normal, 1 = removed (e.g., by moderator), 2 = deleted (by author).",
        'body_word_count': "Number of words in the body, counted using python's split() on whitespace after removing all punctuation marks.",
        'body_length': "Length of the body in number of characters, including whitespace but excluding null characters.",
        'body_checksum': "The checksum of the body (base64 encoded md5 hash for more compact storage).",
        'body_cleaned_word_count': "Number of words in the body it was cleaned as discribed in the paper , counted using python's split() on whitespace after removing all punctuation marks.",
        'body_cleaned_length': "Length of the body in number of characters it was cleaned as discribed in the paper , including whitespace but excluding null characters.",
        'body_cleaned_checksum': "The checksum of the body after it was cleaned as discribed in the paper (base64 encoded md5 hash for more compact storage).",
        'body_textblob_nbayes_classification': "The Python TextBlob NaiveBayesClassifier classification for the body. Note: This is preformed on the original text after 'cleaning' as described in the paper.",
        'body_textblob_nbayes_negative': "The Python TextBlob NaiveBayesClassifier negative score for the body. Note: This is preformed on the original text after 'cleaning' as described in the paper.",
        'body_textblob_nbayes_positive': "The Python TextBlob NaiveBayesClassifier positive score for the body. Note: This is preformed on the original text after 'cleaning' as described in the paper.",
        'body_textblob_polarity': "The Python TextBlob polarity score for the body which ranges from -1 (negative sentiment) to 1 (positive sentiment).",
        'body_textblob_subjectivity': "The Python TextBlob subjectivity score for the body which ranges from 0 (objective) to 1 (subjective).",
        'body_vader_negative_score': "The NLTK Vader SentimentIntensityAnalyzer Negative Score of the body as calculated for the English language. This will be invalid for non-English posts.",
        'body_vader_neutral_score': "The NLTK Vader SentimentIntensityAnalyzer Neutral Score of the body as calculated for the English language. This will be invalid for non-English posts.",
        'body_vader_positive_score': "The NLTK Vader SentimentIntensityAnalyzer Positive Score of the body as calculated for the English language. This will be invalid for non-English posts.",
        'body_vader_composite_score': "The NLTK Vader SentimentIntensityAnalyzer Composite Score of the body as calculated for the English language. This will be invalid for non-English posts.",
        'body_langdetect_lang1': "The first Python langdetect.detect_langs() language code for the post body.",
        'body_langdetect_prob1': "The first Python langdetect.detect_langs() language probability (confidence) for the post body.",
        'body_langdetect_lang2': "The second Python langdetect.detect_langs() language code for the post body.",
        'body_langdetect_prob2': "The second Python langdetect.detect_langs() language probability (confidence) for the post body.",
        'body_langdetect_lang3': "The third Python langdetect.detect_langs() language code for the post body.",
        'body_langdetect_prob3': "The third Python langdetect.detect_langs() language probability (confidence) for the post body.",
        'body_ftlangdetect_lang': "The Python ftlangdetect language code for the post body.",
        'body_ftlangdetect_score': "The Python ftlangdetect language score (confidence) for the post body.",
        'body_polyglot_lang1': "The first Python polyglot.detect.Detector language code for the post body.",
        'body_polyglot_conf1': "The first Python polyglot.detect.Detector language confidence for the post body.",
        'body_polyglot_lang2': "The second Python polyglot.detect.Detector language code for the post body.",
        'body_polyglot_conf2': "The second Python polyglot.detect.Detector language confidence for the post body.",
        'body_polyglot_lang3': "The third Python polyglot.detect.Detector language code for the post body.",
        'body_polyglot_conf3': "The third Python polyglot.detect.Detector language confidence for the post body.",
        'body_textstat_automated_readability_index': "TextStat Automated Readability Index as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_coleman_liau_index': "TextStat Coleman Liau Index as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_crawford': "TextStat Crawford Score as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_dale_chall_readability_score': "TextStat Dale Chall Readability Score as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_difficult_words': "TextStat Difficult Words as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_fernandez_huerta': "TextStat Fernandez Huerta Readability Score as calculated for the Spanish language. This will be invalid for non-Spanish posts.",
        'body_textstat_flesch_kincaid_grade': "TextStat Flesch Kincaid Readability Score as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_flesch_reading_ease': "TextStat Flesch Readability Score as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_gunning_fog': "TextStat Gunning Fog Index as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_gutierrez_polini': "TextStat Gutierrez Polini Score as calculated for the Spanish language. This will be invalid for non-Spanish posts.",
        'body_textstat_linsear_write_formula': "TextStat Linsear Write as calculated for the English language. This will be invalid for non-English posts.",
        'body_textstat_smog_index': "TextStat SMOG Readability Score",
        'body_textstat_szigriszt_pazos': "TextStat Szigriszt-Pazos Score as calculated for the Spanish language. This will be invalid for non-Spanish posts.",
        'body_textstat_text_standard_grade': "TextStat Standard Grade Estimate as calculated for the English language. This will be invalid for non-English posts.",
        'both_word_count': "Number of words in both the title and body together, counted using python's split() on whitespace after removing all punctuation marks.",
        'both_length': "Length of both the title and body together in number of characters, including whitespace but excluding null characters.",
        'title_text_cleaned': "The original text in the post title without URLs, if any. Only present for Submissions (depth=0)",
        'body_text_cleaned': "The original text in the post body without URLs, if any.",
        'title_text': "The original text in the post title, if any. Only present for Submissions (depth=0)",
        'body_text': "The original text of the body of the post, if any.",
    }
    pass
